diff --git a/node_modules/gatsby-remark-vscode/src/createThemeStyles.js b/node_modules/gatsby-remark-vscode/src/createThemeStyles.js
index 5279606..3582ab3 100644
--- a/node_modules/gatsby-remark-vscode/src/createThemeStyles.js
+++ b/node_modules/gatsby-remark-vscode/src/createThemeStyles.js
@@ -67,6 +67,8 @@ function getStylesFromSettings(settings) {
  *  languageName: string,
  *  scopeName: string,
  *  stylesheets: Record<string, string>
+ *  selectorDark: string,
+ *  selectorLight: string,
  * }} options
  * @returns {Promise<string>}
  */
@@ -80,7 +82,9 @@ async function createThemeStyles({
   languageName,
   scopeName,
   cache,
-  stylesheets
+  stylesheets,
+  selectorDark,
+  selectorLight
 }) {
   const colorThemeValue =
     typeof colorTheme === 'function'
@@ -111,22 +115,30 @@ async function createThemeStyles({
 
     registry.setTheme({ settings: [defaultTokenColors, ...tokenColors] });
     if (!stylesheets[themeClassName] || scopeName) {
+      let prefix = `.${themeClassName}`;
+
+      if (setting === 'prefersDarkTheme' && selectorDark) {
+        prefix = `${selectorDark} ${prefix}`;
+      } else if (setting === 'prefersLightTheme' && selectorLight) {
+        prefix = `${selectorLight} ${prefix}`;
+      }
+
       const rules = [
-        renderRule(themeClassName, getStylesFromSettings(settings)),
+        renderRule(prefix, getStylesFromSettings(settings)),
         ...(scopeName
           ? prefixRules(
               generateTokensCSSForColorMap(
                 registry.getColorMap().map(color => replaceColor(color, colorThemeIdentifier))
               ).split('\n'),
-              `.${themeClassName} `
+              `${prefix} `
             )
           : [])
       ];
 
       if (setting === 'prefersDarkTheme') {
-        stylesheets[themeClassName] = prefersDark(rules);
+        stylesheets[themeClassName] = prefersDark(rules, !!selectorDark);
       } else if (setting === 'prefersLightTheme') {
-        stylesheets[themeClassName] = prefersLight(rules);
+        stylesheets[themeClassName] = prefersLight(rules, !!selectorLight);
       } else {
         stylesheets[themeClassName] = rules.join('\n');
       }
diff --git a/node_modules/gatsby-remark-vscode/src/index.js b/node_modules/gatsby-remark-vscode/src/index.js
index 617e13c..bea5a3a 100644
--- a/node_modules/gatsby-remark-vscode/src/index.js
+++ b/node_modules/gatsby-remark-vscode/src/index.js
@@ -44,6 +44,8 @@ function createPlugin() {
       extensionDataDirectory = path.resolve(__dirname, '../lib/extensions'),
       logLevel = 'error',
       host = defaultHost,
+      selectorDark = '',
+      selectorLight = '',
       getLineTransformers = getDefaultLineTransformers,
       ...rest
     } = {}
@@ -107,7 +109,9 @@ function createPlugin() {
           scopeName: scope,
           registry,
           replaceColor,
-          stylesheets
+          stylesheets,
+          selectorDark,
+          selectorLight
         });
 
         const rawLines = text.split(/\r?\n/);
diff --git a/node_modules/gatsby-remark-vscode/src/renderUtils.js b/node_modules/gatsby-remark-vscode/src/renderUtils.js
index 67cd89f..3c801ec 100644
--- a/node_modules/gatsby-remark-vscode/src/renderUtils.js
+++ b/node_modules/gatsby-remark-vscode/src/renderUtils.js
@@ -1,11 +1,11 @@
 const escape = require('lodash.escape');
 
 /**
- * @param {string} className
+ * @param {string} selector
  * @param {string | string[]} propertyList
  */
-function renderRule(className, propertyList) {
-  return `.${className} {\n${typeof propertyList === 'string' ? propertyList : propertyList.join('\n')}\n}`;
+function renderRule(selector, propertyList) {
+  return `${selector} {\n${typeof propertyList === 'string' ? propertyList : propertyList.join('\n')}\n}`;
 }
 
 /**
@@ -18,16 +18,18 @@ function renderMediaQuery(condition, rules) {
 
 /**
  * @param {string | string[]} rules
+ * @param {boolean} skipMediaQuery
  */
-function prefersLight(rules) {
-  return renderMediaQuery('prefers-color-scheme: light', rules);
+function prefersLight(rules, skipMediaQuery) {
+  return skipMediaQuery ? rules.join('\n') : renderMediaQuery('prefers-color-scheme: light', rules);
 }
 
 /**
  * @param {string | string[]} rules
+ * @param {boolean} skipMediaQuery
  */
-function prefersDark(rules) {
-  return renderMediaQuery('prefers-color-scheme: dark', rules);
+function prefersDark(rules, skipMediaQuery) {
+  return skipMediaQuery ? rules.join('\n') : renderMediaQuery('prefers-color-scheme: dark', rules);
 }
 
 /**
diff --git a/node_modules/gatsby-remark-vscode/src/types.d.ts b/node_modules/gatsby-remark-vscode/src/types.d.ts
index e5a0397..f5d22f0 100644
--- a/node_modules/gatsby-remark-vscode/src/types.d.ts
+++ b/node_modules/gatsby-remark-vscode/src/types.d.ts
@@ -50,6 +50,8 @@ interface PluginOptions {
   extensionDataDirectory?: string;
   logLevel?: 'trace' | 'debug' | 'info' | 'warn' | 'error';
   host?: Host;
+  selectorDark?: string;
+  selectorLight?: string;
   getLineTransformers?: (pluginOptions: PluginOptions) => LineTransformer[];
 }
 
